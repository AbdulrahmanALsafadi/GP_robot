import math
from std_msgs.msg import Int16
import rospy

class LegKinematics:
    # Link lengths
    l1 = 203
    l2 = 160.84
    l3 = 60
    l4 = 324
    l5 = 58
    l6 = 95.6

    # Motor range constants for hip
    HIP_MOTOR_MIN = 1882
    HIP_MOTOR_MAX = 2279

    def __init__(self):
        """Initialize ROS node and publishers"""
        rospy.init_node('leg_control', anonymous=True)
        self.pub_lower = rospy.Publisher('r14', Int16, queue_size=10)  # Lower motor
        self.pub_upper = rospy.Publisher('r13', Int16, queue_size=10)  # Upper motor
        self.pub_hip = rospy.Publisher('r15', Int16, queue_size=10)    # Hip motor

    def hip_inverse_kinematics(self, y, z):
        """
        Calculate hip motor position based on y,z coordinates
        Returns motor position in encoder counts (1882-2279)
        """
        # Calculate angle using atan2
        angle = math.degrees(math.atan2(y, z))
        
        # Map angle to motor position
        # Assuming angle range 0-90 degrees maps to full motor range
        ANGLE_MIN = 0
        ANGLE_MAX = 90
        
        motor_range = self.HIP_MOTOR_MAX - self.HIP_MOTOR_MIN
        angle_range = ANGLE_MAX - ANGLE_MIN
        
        motor_pos = self.HIP_MOTOR_MIN + (angle - ANGLE_MIN) * (motor_range / angle_range)
        return int(motor_pos)

    def leg_inverse_kinematics(self, x, z):
        """Calculate leg motor angles (upper and lower)"""
        # Calculate theta 2
        theta2_radians = math.acos((x**2 + z**2 - self.l1**2 - self.l2**2) / 
                                 (2 * self.l1 * self.l2))
        theta2_degrees = math.degrees(theta2_radians)

        # Calculate theta 1
        theta1_radians = math.atan((self.l2 * math.sin(theta2_radians)) / 
                                 (self.l1 + self.l2 * math.cos(theta2_radians))) - \
                        math.atan(z/x) + math.pi / 2
        theta1_degrees = math.degrees(theta1_radians)

        # Calculate alpha 71 from triangle 1
        ct1_squared = self.l6**2 + self.l1**2 - \
                     2 * self.l1 * self.l6 * math.cos(math.pi - theta1_radians)
        ct1 = math.sqrt(ct1_squared)

        alpha71_radians = math.acos((self.l6**2 + ct1**2 - self.l1**2) / 
                                  (2 * self.l6 * ct1))
        alpha71_degrees = math.degrees(alpha71_radians)

        At1_radians = math.asin(self.l6 * (math.sin(alpha71_radians) / self.l1))
        At1_degrees = math.degrees(At1_radians)

        # Calculate alpha 72 from triangle 2
        ct2_squared = self.l3**2 + ct1**2 - \
                     2 * self.l3 * ct1 * math.cos(math.pi - 2.11 + theta2_radians - At1_radians)
        ct2 = math.sqrt(ct2_squared)

        alpha72_radians = math.acos((ct1**2 + ct2**2 - self.l3**2) / 
                                  (2 * ct1 * ct2))
        alpha72_degrees = math.degrees(alpha72_radians)

        # Calculate alpha 73 from triangle 3
        alpha73_radians = math.acos((self.l5**2 + ct2**2 - self.l4**2) / 
                                  (2 * self.l5 * ct2))
        alpha73_degrees = math.degrees(alpha73_radians)

        # Calculate theta 3
        theta3_degrees = (alpha71_degrees + alpha72_degrees + alpha73_degrees)

        return theta1_degrees, theta2_degrees, theta3_degrees

    def convert_to_motor_positions(self, theta1, theta2, theta3):
        """Convert angles to motor positions"""
        theta1_shifted = theta1 + 180
        theta3_shifted = theta3 + 27

        # Convert to motor encoder counts (4096 counts per 360 degrees)
        motor_pos_lower = int(theta1_shifted / 360 * 4096)
        motor_pos_upper = int(theta3_shifted / 360 * 4096)

        return motor_pos_lower, motor_pos_upper

    def move_leg(self, x, y, z):
        """
        Move the entire leg to a position
        Returns True if successful, False if any position is out of range
        """
        try:
            # Calculate hip position
            hip_pos = self.hip_inverse_kinematics(y, z)
            
            # Check hip range
            if not (self.HIP_MOTOR_MIN <= hip_pos <= self.HIP_MOTOR_MAX):
                rospy.logwarn(f"Hip position {hip_pos} out of range ({self.HIP_MOTOR_MIN}-{self.HIP_MOTOR_MAX})")
                return False

            # Calculate leg positions
            theta1, theta2, theta3 = self.leg_inverse_kinematics(x, z)
            motor_pos_lower, motor_pos_upper = self.convert_to_motor_positions(theta1, theta2, theta3)

            # Publish positions
            rospy.loginfo(f"Moving to positions - Hip: {hip_pos}, Lower: {motor_pos_lower}, Upper: {motor_pos_upper}")
            
            self.pub_hip.publish(Int16(hip_pos))
            self.pub_lower.publish(Int16(motor_pos_lower))
            self.pub_upper.publish(Int16(motor_pos_upper))
            
            return True

        except Exception as e:
            rospy.logerr(f"Error calculating positions: {str(e)}")
            return False

def main():
    try:
        # Create leg kinematics instance
        leg = LegKinematics()
        
        # Example coordinates
        x = 1    # Forward/back
        y = 363  # Side to side
        z = 363  # Height

        # Move leg to position
        success = leg.move_leg(x, y, z)
        
        if success:
            rospy.loginfo("Movement commands sent successfully")
        else:
            rospy.loginfo("Movement failed - check ranges and coordinates")
        
        # Give time for movement to complete
        rospy.sleep(1)

    except rospy.ROSInterruptException:
        pass

if __name__ == "__main__":
    main()
