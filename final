#Best Code 

import math
from std_msgs.msg import Int16
import rospy


class Inverse:
    l1 = 203
    l2 = 160.84
    l3 = 60
    l4 = 324
    l5 = 58
    l6 = 95.6
    lf = 98 

    def InverseKinematicsFoot(self, x, y, z, alpha, beta):
        xA = x - (((self.lf) / 2) * math.cos(math.radians(beta)) * math.sin(math.radians(alpha)))
        xB = x + (((self.lf) / 2) * math.cos(math.radians(beta)) * math.sin(math.radians(alpha)))

        yA = y + ((self.lf  / 2) * math.cos(math.radians(beta)) * math.cos(math.radians(alpha)))
        yB = y - ((self.lf  / 2) * math.cos(math.radians(beta)) * math.cos(math.radians(alpha)))

        zA = z + ((self.lf / 2) * math.sin(math.radians(beta)) * math.cos(math.radians(alpha)))
        zB = z - ((self.lf / 2) * math.sin(math.radians(beta)) * math.cos(math.radians(alpha)))
        print (f"xA = {xA}")
        print (f"xB = {xB}")
        print (f"yA = {yA}")
        print (f"yB = {yB}")
        print (f"zA = {zA}")
        print (f"zB = {zB}")
# Use abs() to take only positive values
        zA = abs(zA)
        zB = abs(zB)
        print (f"zA + = {zA}")
        print (f"zB + = {zB}")
  
        return xA, xB , yA , yB , zA , zB 
    
    #Hip Motor 1DOF
    def InverseKinematicsHip(self, y, z):
        thetaHip = math.atan2(165 + y, z)
        return math.degrees(thetaHip)
    def InverseKinematicsHip2(self, y, z):
        thetaHip = math.atan2(165 - y, z)
        return math.degrees(thetaHip)
    
    
    #Upper&Lower Motor 2DOF
    def InverseKinematics(self, x, z):
        cos_theta2 = (x**2 + z**2 - self.l1**2 - self.l2**2) / (2 * self.l1 * self.l2)
        cos_theta2 = max(-1, min(1, cos_theta2))  # Clamp to [-1, 1]
        theta2_radians = math.acos(cos_theta2)
        theta2 = math.degrees(theta2_radians)

        # Calculate theta 1
        theta1_radians = math.atan((self.l2 * math.sin(theta2_radians)) / (self.l1 + self.l2 * math.cos(theta2_radians))) - math.atan2(z , x) + math.pi / 2
        theta1 = math.degrees(theta1_radians)

        # Calculate ct1 for alpha 71
        ct1_squared = self.l6**2 + self.l1**2 - 2 * self.l1 * self.l6 * math.cos(math.pi - theta1_radians)
        ct1 = math.sqrt(ct1_squared)

        # Calculate alpha 71
        cos_alpha71 = (self.l6**2 + ct1**2 - self.l1**2) / (2 * self.l6 * ct1)
        cos_alpha71 = max(-1, min(1, cos_alpha71))  # Clamp to [-1, 1]
        alpha71_radians = math.acos(cos_alpha71)
        alpha71_degrees = math.degrees(alpha71_radians)

        # Calculate At1
        sin_At1 = self.l6 * (math.sin(alpha71_radians) / self.l1)
        sin_At1 = max(-1, min(1, sin_At1))  # Clamp to [-1, 1]
        At1_radians = math.asin(sin_At1)
        At1_degrees = math.degrees(At1_radians)

        # Calculate ct2 for alpha 72
        ct2_squared = self.l3**2 + ct1**2 - 2 * self.l3 * ct1 * math.cos(math.pi - 2.11 + theta2_radians - At1_radians)
        ct2 = math.sqrt(ct2_squared)

        # Calculate alpha 72
        cos_alpha72 = (ct1**2 + ct2**2 - self.l3**2) / (2 * ct1 * ct2)
        cos_alpha72 = max(-1, min(1, cos_alpha72))  # Clamp to [-1, 1]
        alpha72_radians = math.acos(cos_alpha72)
        alpha72_degrees = math.degrees(alpha72_radians)

        # Calculate alpha 73
        cos_alpha73 = (self.l5**2 + ct2**2 - self.l4**2) / (2 * self.l5 * ct2)
        cos_alpha73 = max(-1, min(1, cos_alpha73))  # Clamp to [-1, 1]
        alpha73_radians = math.acos(cos_alpha73)
        alpha73_degrees = math.degrees(alpha73_radians)

        # Calculate theta 3
        theta3 =  (alpha71_degrees + alpha72_degrees + alpha73_degrees)

        return theta1, theta2, theta3

def mainRight():
    # Instantiate the Inverse class
    inv = Inverse()
    
    # Provide values of the right leg
    print("Enter the value of Right legs:")
    xr, zr, yr, alphar, betar, gammar = map(float, input("Enter values for xr, zr, yr, alphar, betar, gammar (separated by spaces): ").split())
    #shift gamma for the left leg
    
    
    # Call the InverseKinematics method
    xAr , xBr , yAr , yBr , zAr , zBr = inv.InverseKinematicsFoot(xr, yr, zr, alphar, betar)
    theta1r, theta2r, theta3r = inv.InverseKinematics(xBr, zBr)
    
    thetaHipr = inv.InverseKinematicsHip(yBr, zBr)

    theta1l, theta2l, theta3l = inv.InverseKinematics(xAr, zAr)
    thetaHipl = inv.InverseKinematicsHip(yAr, zAr)

    # Print the results right 
    print(f"Theta 1 Lower motor Right: {theta1r} degrees")
    print(f"Theta 2 knee Right: {theta2r} degrees")
    print(f"Theta 3 Upper motor Right: {theta3r} degrees")
    print(f"Theta Hip Upper motor : {thetaHipr} degrees")
    
    theta1shiftedr = theta1r + 180
    theta3shiftedr = theta3r + 27 
    thetaHipshiftedr = thetaHipr + 180 

    print(f"Theta1 shifted Lower motor Right: {theta1shiftedr} degrees")
    print(f"Theta2 shifted knee Right: {theta2r} degrees")
    print(f"Theta3 shifted Upper motor Right: {theta3shiftedr} degrees")
    print(f"Theta Hip shifted : {thetaHipshiftedr} degrees")

    print(f"Theta1 shifted Lower motor Right decimal: {int(theta1shiftedr / 360 * 4096)} ")
    print(f"Theta3 shifted Upper motor Right decimal: {int(theta3shiftedr / 360 * 4096)} ")
    print(f"Theta Hip shifted decimal: {int(thetaHipshiftedr / 360 * 4096)} ")

     # Print the results Left
    print(f"Theta 1 Lower motor Left: {theta1l} degrees")
    print(f"Theta 2 knee Left: {theta2l} degrees")
    print(f"Theta 3 Upper motor Left: {theta3l} degrees")
    print(f"Theta Hip Upper motor : {thetaHipl} degrees")
    
    theta1shiftedl = theta1l + 180
    theta3shiftedl = theta3l + 27 
    thetaHipshiftedl = thetaHipl + 180 

    print(f"Theta1 shifted Lower motor Left: {theta1shiftedl} degrees")
    print(f"Theta2 shifted knee Left: {theta2l} degrees")
    print(f"Theta3 shifted Upper motor Left: {theta3shiftedl} degrees")
    print(f"Theta Hip shifted : {thetaHipshiftedl} degrees")

    print(f"Theta1 shifted Lower motor Left decimal: {int(theta1shiftedl / 360 * 4096)} ")
    print(f"Theta3 shifted Upper motor Left decimal: {int(theta3shiftedl / 360 * 4096)} ")
    print(f"TTheta Hip shifted decimal: {int(thetaHipshiftedl / 360 * 4096)} ")
    return theta1shiftedr, theta2r, theta3shiftedr, thetaHipshiftedr, theta1shiftedl, theta2l, theta3shiftedl , thetaHipshiftedl, gammar

#second leg (left leg) 
def mainLeft():   
    # Instantiate the Inverse class
    inv = Inverse()

    print("Enter the value of Left leg:")
    xl, zl, yl, alphal, betal, gammal = map(float, input("xl, zl, yl, alphal, betal, gammal (separated by spaces): ").split())
    #shift gamma for the left leg
    xAl , xBl , yAl , yBl , zAl , zBl = inv.InverseKinematicsFoot(xl, yl, zl, alphal, betal)
    
    # Call the InverseKinematics method
    theta1r, theta2r, theta3r = inv.InverseKinematics(xAl, zAl)
    
    thetaHipr = inv.InverseKinematicsHip2(yAl, zAl)

    theta1l, theta2l, theta3l = inv.InverseKinematics(xBl, zBl)
    thetaHipl = inv.InverseKinematicsHip2(yBl, zBl)


    # Print the results right 
    print(f"Theta 1 Lower motor Right: {theta1r} degrees")
    print(f"Theta 2 knee Right: {theta2r} degrees")
    print(f"Theta 3 Upper motor Right: {theta3r} degrees")
    print(f"Theta Hip Upper motor : {thetaHipr} degrees")
    
    theta1shiftedr = theta1r + 180
    theta3shiftedr = theta3r + 27 
    thetaHipshiftedr = thetaHipr + 180 

    print(f"Theta1 shifted Lower motor Right: {theta1shiftedr} degrees")
    print(f"Theta2 shifted knee Right: {theta2r} degrees")
    print(f"Theta3 shifted Upper motor Right: {theta3shiftedr} degrees")
    print(f"Theta Hip shifted : {thetaHipshiftedr} degrees")

    print(f"Theta1 shifted Lower motor Right decimal: {int(theta1shiftedr / 360 * 4096)} ")
    print(f"Theta3 shifted Upper motor Right decimal: {int(theta3shiftedr / 360 * 4096)} ")
    print(f"Theta Hip shifted decimal: {int(thetaHipshiftedr / 360 * 4096)} ")

    # Print the results Left
    print(f"Theta 1 Lower motor Left: {theta1l} degrees")
    print(f"Theta 2 knee Left: {theta2l} degrees")
    print(f"Theta 3 Upper motor Left: {theta3l} degrees")
    print(f"Theta Hip Upper motor : {thetaHipl} degrees")
    
    theta1shiftedl = theta1l + 180
    theta3shiftedl = theta3l + 27 
    thetaHipshiftedl = thetaHipl + 180 

    print(f"Theta1 shifted Lower motor Left: {theta1shiftedl} degrees")
    print(f"Theta2 shifted knee Left: {theta2l} degrees")
    print(f"Theta3 shifted Upper motor Left: {theta3shiftedl} degrees")
    print(f"Theta Hip shifted : {thetaHipshiftedl} degrees")

    print(f"Theta1 shifted Lower motor Left decimal: {int(theta1shiftedl / 360 * 4096)} ")
    print(f"Theta3 shifted Upper motor Left decimal: {int(theta3shiftedl / 360 * 4096)} ")
    print(f"TTheta Hip shifted decimal: {int(thetaHipshiftedl / 360 * 4096)} ")
    
   
    return theta1shiftedr, theta2r, theta3shiftedr, thetaHipshiftedr, theta1shiftedl, theta2l, theta3shiftedl , thetaHipshiftedl, gammal

def moveMotor():
    rospy.init_node('moveMotor', anonymous=True)
    
    #For the Right leg
    pubTh1r14 = rospy.Publisher('r14', Int16, queue_size=10)
    pubTh3r13 = rospy.Publisher('r13', Int16, queue_size=10)
    pubThHipr15 = rospy.Publisher('r15', Int16, queue_size=10)
    pubTh1r12 = rospy.Publisher('r12', Int16, queue_size=10)
    pubTh3r11 = rospy.Publisher('r11', Int16, queue_size=10)
    pubGammarr16 = rospy.Publisher('r16', Int16, queue_size=10)

    #For the Left leg
    pubTh1r24 = rospy.Publisher('r24', Int16, queue_size=10)
    pubTh3r23 = rospy.Publisher('r23', Int16, queue_size=10)
    pubThHipr25 = rospy.Publisher('r25', Int16, queue_size=10)
    pubTh1r22 = rospy.Publisher('r22', Int16, queue_size=10)
    pubTh3r21 = rospy.Publisher('r21', Int16, queue_size=10)
    pubGammalr26 = rospy.Publisher('r26', Int16, queue_size=10)

    theta1shiftedrr, theta2rr, theta3shiftedrr, thetaHipshiftedrr, theta1shiftedlr, theta2lr, theta3shiftedlr , thetaHipshiftedlr, gammar= mainRight()
    theta1shiftedrl, theta2rl, theta3shiftedrl, thetaHipshiftedrl, theta1shiftedll, theta2ll, theta3shiftedll , thetaHipshiftedll, gammal= mainLeft()

    # Convert to motor-specific range for the Right leg
    motor_pos_Th3r11 = int(theta3shiftedlr / 360 * 4096)
    motor_pos_Th1r12 = int(theta1shiftedlr / 360 * 4096)
    motor_pos_Th3r13 = int(theta3shiftedrr / 360 * 4096)
    motor_pos_Th1r14 = int(theta1shiftedrr / 360 * 4096)
    motor_pos_ThHipr15 = int(thetaHipshiftedrr / 360 * 4096)
    motor_pos_gammarr16 = int(gammar / 360 * 4096)
    
    # Convert to motor-specific range for the Left leg
    motor_pos_Th3r21 = int(theta3shiftedll / 360 * 4096)
    motor_pos_Th1r22 = int(theta1shiftedll / 360 * 4096)
    motor_pos_Th3r23 = int(theta3shiftedrl / 360 * 4096)
    motor_pos_Th1r24 = int(theta1shiftedrl / 360 * 4096)
    motor_pos_ThHipr25 = int(thetaHipshiftedrl / 360 * 4096) #thetaHipshiftedrl i change it to thetaHipshiftedll
    motor_pos_gammalr26 = int(gammal / 360 * 4096)

    
    rospy.sleep(1)  # Allow time for publisher to connect
    
    #login to publisher For the Right leg
    rospy.loginfo(f"Publishing to r14: {motor_pos_Th1r14}")
    rospy.loginfo(f"Publishing to r13: {motor_pos_Th3r13}")
    rospy.loginfo(f"Publishing to r15: {motor_pos_ThHipr15}")
    rospy.loginfo(f"Publishing to r12: {motor_pos_Th1r12}")
    rospy.loginfo(f"Publishing to r11: {motor_pos_Th3r11}")
    rospy.loginfo(f"Publishing to r16: {motor_pos_gammarr16}")


    #login to publisher For the Lrft leg
    rospy.loginfo(f"Publishing to r24: {motor_pos_Th1r24}")
    rospy.loginfo(f"Publishing to r23: {motor_pos_Th3r23}")
    rospy.loginfo(f"Publishing to r25: {motor_pos_ThHipr25}")
    rospy.loginfo(f"Publishing to r22: {motor_pos_Th1r22}")
    rospy.loginfo(f"Publishing to r21: {motor_pos_Th3r21}")
    rospy.loginfo(f"Publishing to r26: {motor_pos_gammalr26}")


    #publish for the Right leg
    pubTh1r14.publish(motor_pos_Th1r14)
    pubTh3r13.publish(motor_pos_Th3r13)
    pubThHipr15.publish(motor_pos_ThHipr15)
    pubTh1r12.publish(motor_pos_Th1r12)
    pubTh3r11.publish(motor_pos_Th3r11)
    pubGammarr16.publish(motor_pos_gammarr16)

    #publish for the Ledt leg
    pubTh1r24.publish(motor_pos_Th1r24)
    pubTh3r23.publish(motor_pos_Th3r23)
    pubThHipr25.publish(motor_pos_ThHipr25)
    pubTh1r22.publish(motor_pos_Th1r22)
    pubTh3r21.publish(motor_pos_Th3r21)
    pubGammalr26.publish(motor_pos_gammalr26)


    rospy.sleep(1)  # Give time for messages to be sent

if __name__ == "__main__":
    try:
        moveMotor()
    except rospy.ROSInterruptException:
        pass
